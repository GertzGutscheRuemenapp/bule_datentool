# Generated by Django 3.2.11 on 2022-02-13 18:50

from django.db import migrations, models
import datentool_backend


class Migration(migrations.Migration):

    dependencies = [
        ('datentool_backend', '0075_auto_20220213_1950'),
    ]

    operations = [
        migrations.RunSQL(
            sql=[('''
            INSERT INTO datentool_backend_areafield (area_level_id, name, field_type_id)
            SELECT DISTINCT
            a.area_level_id,  jsonb_object_keys(a.attributes) AS name, ft.id AS field_type
            FROM datentool_backend_area a,
            (SELECT ft.id FROM datentool_backend_fieldtype ft WHERE ft.ftype = 'STR' LIMIT 1) ft;

            UPDATE datentool_backend_areafield af
            SET is_label=True WHERE af.name = 'gen';

            INSERT INTO datentool_backend_areaattribute
            (area_id, field_id, str_value)
            SELECT
            d.area_id, d.field_id, d.value AS str_value
            FROM (
            SELECT
            b.id AS area_id, (b.kv).key AS field, (b.kv).value, af.id AS field_id
            FROM (
             SELECT
             a.id, a.area_level_id, jsonb_each_text(a.attributes) kv
             FROM datentool_backend_area a
             ) b,
            datentool_backend_areafield af
            WHERE af.area_level_id = b.area_level_id AND (b.kv).key = af.name) d;
             ''', None)],
            reverse_sql=[('''
            UPDATE datentool_backend_area a
            SET attributes = b.attributes
            FROM (
            SELECT a.area, jsonb_object_agg(af.name, a.value) AS attributes
            FROM datentool_backend_areaattribute a,
            datentool_backend_areafield af
            WHERE af.id = a.field_id
            GROUP BY a.area) b
            WHERE b.area = a.id
            ;
            ''', None)]
            ),
        migrations.RemoveField(
            model_name='arealevel',
            name='label_field',
        ),
        migrations.RemoveField(
            model_name='area',
            name='attributes',
        ),
        migrations.RunSQL(
            sql=[('''

            INSERT INTO datentool_backend_placeattribute (place_id, field_id, num_value, str_value)
            SELECT
            d.place_id,
            d.field_id,
            CASE WHEN d.field_type_id = 1 THEN d.value::numeric ELSE NULL END AS num_field,
            CASE WHEN d.field_type_id IN (2,3) THEN d.value ELSE NULL END AS str_field
            FROM (
            SELECT
            c.place_id,
            c.key,
            c.value,
            pf.id AS field_id,
            pf.field_type_id
            FROM (
            SELECT
            b.id AS place_id, b.infrastructure_id, (b.kv).key, (b.kv).value
            FROM (
             SELECT
             a.id, a.infrastructure_id, jsonb_each_text(a.attributes) kv
             FROM datentool_backend_place a
             )b
             ) c,
             datentool_backend_placefield pf
            WHERE pf.infrastructure_id = c.infrastructure_id AND c.key = pf.name) d
             ;
             ''', None)],
            reverse_sql=[('''
            UPDATE datentool_backend_place a
            SET attributes = b.attributes
            FROM (
            SELECT a.place, jsonb_object_agg(pf.name, a.value) AS attributes
            FROM datentool_backend_placeattribute a,
            datentool_backend_placefield pf
            WHERE pf.id = a.field_id
            GROUP BY a.place) b
            WHERE b.place = a.id;
            ''', None)]
            ),
        migrations.RemoveField(
            model_name='place',
            name='attributes',
        ),
    ]
