from hypothesis.extra.django import TestCase, from_model
from hypothesis import given
from string import printable
from hypothesis.strategies import (integers, lists, recursive,
                                   none, booleans, floats, text, dictionaries)
from hypothesis_geometry import planar
import ground.core.geometries as gg
from django.contrib.gis.geos import Polygon
from .models import (SymbolForm, MapSymbols,
                      LayerGroup, InternalWFSLayer,
                      Source, SourceTypes,
                      AreaLevel, Area)
import json


def map_symbol():
    return from_model(MapSymbols, symbol=from_model(SymbolForm))

def layer_group():
    return from_model(LayerGroup)

def internal_wfs_layer():
    return from_model(InternalWFSLayer,
                      group=layer_group(),
                      symbol=map_symbol())

def source():
    return from_model(Source)

def area_level():
    return from_model(AreaLevel, source=source(), layer=internal_wfs_layer())

def json_example():
    json = recursive(
        none() | booleans() | floats(allow_nan=False,
                                     allow_infinity=False) | text(printable),
        lambda children: lists(children) | dictionaries(text(printable), children),
    )
    return json

def polygons():
    min_coordinate, max_coordinate = -100, 100
    coordinates = integers(min_coordinate, max_coordinate)
    min_size, max_size = 5, 10
    min_holes_size, max_holes_size = 1, 3
    min_hole_size, max_hole_size = 4, 8
    polygons = planar.polygons(coordinates,
                               min_size=min_size,
                               max_size=max_size,
                               min_holes_size=min_holes_size,
                               max_holes_size=max_holes_size,
                               min_hole_size=min_hole_size,
                               max_hole_size=max_hole_size)

    return polygons

def convert_polygons(polygon: gg.Polygon) -> Polygon:
    """Convert a polygon generated by hypothesis to a geos-Polygon"""
    ring = [(p.x, p.y) for p in polygon.border.vertices]
    ring += (ring[0], )

    holes = [[(p.x, p.y) for p in hole.vertices] for hole in polygon.holes]
    for hole in holes:
        hole += (hole[0], )
    polygon = Polygon(ring, *holes)
    return polygon


class AreaTestCase(TestCase):

    @given(map_symbol())
    def test_map_symbols(self, map_symbol):
        self.assertIsInstance(map_symbol, MapSymbols)
        self.assertIsInstance(map_symbol.symbol, SymbolForm)
        self.assertIsNotNone(map_symbol.pk)

    @given(layer_group())
    def test_layer_group(self, layer_group):
        self.assertIsInstance(layer_group, LayerGroup)
        self.assertIsNotNone(layer_group.pk)

    @given(internal_wfs_layer())
    def test_internal_wfs_layer(self, wfs_layer):
        self.assertIsInstance(wfs_layer, InternalWFSLayer)
        self.assertIsInstance(wfs_layer.group, LayerGroup)
        self.assertIsInstance(wfs_layer.symbol.symbol, SymbolForm)
        self.assertIsNotNone(wfs_layer.pk)

    @given(source())
    def test_source(self, source):
        self.assertIsInstance(source, Source)
        self.assertIn(source.source_type, SourceTypes)

    @given(area_level())
    def test_area_level(self, area_level):
        self.assertIsInstance(area_level, AreaLevel)
        self.assertIsInstance(area_level.source, Source)
        self.assertIsInstance(area_level.layer, InternalWFSLayer)

    @given(from_model(Area,
                      area_level=area_level(),
                      attributes=json_example(),
                      geom=polygons().map(convert_polygons)))
    def test_area(self, area):
        self.assertIsInstance(area, Area)
        result = json.loads(json.dumps(area.attributes))
        self.assertEqual(result, area.attributes)
        self.assertIsInstance(area.geom, Polygon)

